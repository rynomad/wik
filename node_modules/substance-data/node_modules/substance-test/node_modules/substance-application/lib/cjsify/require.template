(function(global) {

var require = function(file, parentModule) {

  if (require.aliases[file]) {
    file = require.aliases[file];
  }
  if({}.hasOwnProperty.call(require.cache, file)) {
    return require.cache[file];
  }

  var resolved;
  try {
    resolved = require.resolve(file);
  } catch (err) {
    delete require.cache[file];
    throw new Error('Error: ' + err.stack);
  }

  if(!resolved) {
    delete require.cache[file];
    throw new Error('Failed to resolve module ' + file);
  }
  var module$ = {
    id: file,
    require: require,
    filename: file,
    exports: {},
    loaded: false,
    parent: parentModule,
    children: []
  };
  if(parentModule) {
    parentModule.children.push(module$);
  }
  var dirname = file.slice(0, file.lastIndexOf('/') + 1);
  resolved.call(window, window, module$, module$.exports, dirname, file);
  module$.loaded = true;
  require.cache[file] = module$.exports;

  return module$.exports;
};
require.aliases = ###ALIASES###;
require.modules = {};
require.cache = {};
require.resolve = function(file){
  return {}.hasOwnProperty.call(require.modules, file) ? require.modules[file] : void 0;
};
require.define = function(file, fn){
  require.modules[file] = fn;
};

global.require = require;

})(window);
