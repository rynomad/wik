"use strict";

var Application = require("substance-application");
var View = Application.View;
var $$ = Application.$$;

var TestActionView = function(testAction, testSuiteView) {
  View.call(this);

  this.testAction = testAction;
  this.testSuiteView = testSuiteView;
};
TestActionView.Prototype = function() {
  var __super__ = View.prototype;

  this.render = function() {
    this.el.innerHTML = "";
    this.el.classList.add("action");

    var labelEl = $$(".label", {
      text: this.testAction.label
    });

    this.durationEl = $$(".duration", {
      text: "-"
    });

    this.errorEl = $$(".error");

    this.el.appendChild(labelEl);
    this.el.appendChild(this.errorEl);
    this.el.appendChild(this.durationEl)

    return this;
  };

  this.dispose = function() {
    __super__.dispose.call(this);
  };

  this.updateReport = function(actionReport) {
    this.el.classList.remove("success");
    this.el.classList.remove("error");
    this.el.classList.add(actionReport.error ? 'error' : 'success')

    this.errorEl.innerHTML = "";

    if (actionReport.error) {
      var fragment = document.createDocumentFragment();
      var error = actionReport.error;
      fragment.appendChild($$('.error-message', {text: error.message}));
      if (error.html) {
        var errHtmlEl = $$('.error-html');
        errHtmlEl.innerHTML = error.html;
        fragment.appendChild(errHtmlEl);
      }
      fragment.appendChild($$('.error-source', {children: [$$('pre', {text: actionReport.sourcecode})]}));
      fragment.appendChild($$('.stack-trace', {children: [$$('pre', {text: error.stack})]}));
      this.errorEl.appendChild(fragment);
    }

    this.durationEl.innerHTML = actionReport.duration+" ms";
  };

};
TestActionView.Prototype.prototype = View.prototype;
TestActionView.prototype = new TestActionView.Prototype();

module.exports = TestActionView;
