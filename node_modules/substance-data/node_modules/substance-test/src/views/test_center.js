"use strict";

var Application = require("substance-application");
var View = Application.View;
var _ = require("underscore");
var $$ = Application.$$;
var TestSuiteView = require("./test_suite_view");

// Substance.TestCenter
// ==========================================================================

var TestCenter = function(testRunner) {
  View.call(this);
  this.$el.addClass('test-center');

  this.testRunner = testRunner;

  this.suiteViews = {};
  this.shownSuite = null;

  // // For outgoing events
  this.listenTo(this.testRunner, 'test:before', this.beforeTest);
  this.listenTo(this.testRunner, 'test:report', this.updateTestReport);
};

TestCenter.Prototype = function() {

  this.render = function() {
    var fragment = document.createDocumentFragment();

    this.menuEntries = {};
    var children = [];
    _.each(this.testRunner.suites, function(ts) {
      var entry = $$('a.test-suite.'+ts.name, {
        "href": "#tests/"+ts.name,
        "text": ts.name
      });
      this.menuEntries[ts.name] = entry;
      children.push(entry)
    }, this);

    var testSuitesMenu = $$('.test-suites', {
      children: children
    });
    this.testSuiteContainer = $$('.test-report');

    var testSuites = this.testRunner.suites;
    _.each(testSuites, function(suite, id) {
      var suiteView = new TestSuiteView(suite);
      this.suiteViews[id] = suiteView;
      this.testSuiteContainer.appendChild(suiteView.render().el);
      suiteView.hide();
    }, this);

    fragment.appendChild(testSuitesMenu);
    fragment.appendChild(this.testSuiteContainer);
    fragment.appendChild($$('.test-output'));

    this.el.innerHTML = "";
    this.el.appendChild(fragment);
    return this;
  };

  this.dispose = function() {
    this.stopListening();
  };

  this.showSuite = function(suiteId) {
    if (this.shownSuite) this.shownSuite.hide();
    this.shownSuite = this.suiteViews[suiteId];
    this.shownSuite.show();
  };

  this.beforeTest = function(test) {
    var suiteName = test.path[0];
    this.showSuite(suiteName);
  };

  this.updateTestReport = function(test, report) {
    var suiteName = test.path[0];
    var suite = this.testRunner.suites[suiteName];
    var suiteView = this.suiteViews[suiteName];
    suiteView.updateTestReport(test, report);

    var entry = this.menuEntries[suite.name];

    if (suite.isSuccessful()) {
      entry.classList.remove("error");
      entry.classList.add("success");
    } else {
      entry.classList.remove("success");
      entry.classList.add("error");
    }
  };
};

TestCenter.Prototype.prototype = View.prototype;
TestCenter.prototype = new TestCenter.Prototype();

module.exports = TestCenter;
