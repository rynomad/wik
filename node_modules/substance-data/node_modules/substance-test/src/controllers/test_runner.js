"use strict";

var _ = require('underscore');
var util = require('substance-util');
var Test = require('../test');

// Pack the tests into test suites
// --------
// Note: the first label is taken as the suite name

var extractTestSuites = function(tests) {
  var suites = {};

  _.each(tests, function(test) {
    var suiteName = test.path[0];

    var suite = suites[suiteName];
    if (!suite) {
      suite = {
        name: suiteName,
        tests: [],
        reports: {}
      };
      suite.isSuccessful = function() {
        for (var name in suite.reports) {
          var r = suite.reports[name];
          if (!r.success) {
            return false;
          }
        }
        return true;
      };
      suites[suiteName] = suite;
    }
    suite.tests.push(test);
  });

  return suites;
};

// Substance.Test.Runner
// ================================================
//

var TestRunner = function() {
  this.tests = _.extend({}, Test.tests);
  this.suites = extractTestSuites(Test.tests);
  this.currentTest = null;
  this.currentAction = null;
};

TestRunner.Prototype = function() {

  _.extend(this, util.Events);

  this.runTest = function(test, cb) {
    if (this.__testrunning__) {
      console.error("Test runner is already running.");
      return;
    }
    var self = this;

    self.trigger('test:before', test);

    this.__testrunning__ = true;
    try {
      test.run(function(err, testResult) {
        var report = {
          "name": test.name,
          "actions": testResult
        };

        if (err) {
          report.error = err;
          report.success = false;
        } else {
          report.success = true;
        }

        // store the latest report
        self.suites[test.path[0]].reports[test.name] = report;
        self.trigger('test:report', test, report);
        self.__testrunning__ = false;
        cb(err);
      });
    } catch (err) {
      // This happens if there is something wrong with the Test (Syntax errors, Prototyping errors etc...)
      var report = {
        "name": test.name,
        "actions": [],
        success: false,
        error: err
      };
      _.each(test.actions, function(a) {
        report.actions.push({
          label: a.label,
          duration: 0,
          error: err
        });
      });
      self.suites[test.path[0]].reports[test.name] = report;
      self.trigger('test:report', test, report);
      self.__testrunning__ = false;

      console.error(err.toString());
      util.printStackTrace(err);
      cb(err);
    }
  };

  // Runs a single test-suite
  // --------
  //

  this.runSuite = function(suite, cb) {
    if (this.__isrunning__) {
      console.error("Test runner is already running.");
      return;
    }

    var self = this;
    this.__isrunning__ = true;

    util.async.each({
      items: suite.tests,
      iterator: function(test, cb) {
        self.runTest(test, cb);
      },
      stopOnError: false
    },
    function(err) {
      self.__isrunning__ = false;
      // HACK: on uncaught exceptions the test runner does not reset this flag
      self.__testrunning__ = false;
      cb(err);
    });
  };

  this.runAll = function(cb) {
    if (this.__isrunning__) {
      console.error("Test runner is already running.");
      return;
    }

    var self = this;
    util.async.each({
      items: this.suites,
      iterator: function(suite, name, cb) {
        self.runSuite(suite, cb);
      },
      stopOnError: false
    }, cb);
  };

};
TestRunner.prototype = new TestRunner.Prototype();

module.exports = TestRunner;
